{
  "info": {
    "_postman_id": "brands-api-test-unique-id",
    "name": "Brands API Tests - Data Driven - Fixed",
    "description": "Test API brands: POST, GET, PUT với data-driven test, có thêm test case thất bại. Sửa status và assert theo tài liệu API.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "POST Brand",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.expect(pm.response.code).to.eql(200);",
              "});",
              "",
              "pm.test('Response has id, name, slug in data object', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('data');",
              "    pm.expect(jsonData.data).to.have.property('id');",
              "    pm.expect(jsonData.data.name).to.eql(pm.variables.get('name'));",
              "    pm.expect(jsonData.data.slug).to.eql(pm.variables.get('slug'));",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"{{name}}\",\n  \"slug\": \"{{slug}}\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/brands",
          "host": [
            "{{base_url}}"
          ],
          "path": ["brands"]
        }
      }
    },
    {
      "name": "GET Brand by ID",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.expect(pm.response.code).to.eql(200);",
              "});",
              "",
              "pm.test('Brand information matches request', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.id).to.eql(parseInt(pm.variables.get('id')));",
              "    pm.expect(jsonData.data.name).to.eql(pm.variables.get('name'));",
              "    pm.expect(jsonData.data.slug).to.eql(pm.variables.get('slug'));",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/brands/{{id}}",
          "host": [
            "{{base_url}}"
          ],
          "path": ["brands", "{{id}}"]
        }
      }
    },
    {
      "name": "PUT Brand by ID",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.expect(pm.response.code).to.eql(200);",
              "});",
              "",
              "pm.test('Updated brand fields are returned in data', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.name).to.eql(pm.variables.get('name') + ' Updated');",
              "    pm.expect(jsonData.data.slug).to.eql(pm.variables.get('slug') + '-updated');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"{{name}} Updated\",\n  \"slug\": \"{{slug}}-updated\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/brands/{{id}}",
          "host": [
            "{{base_url}}"
          ],
          "path": ["brands", "{{id}}"]
        }
      }
    },
    {
      "name": "POST Brand - Fail Cases",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 400 when name or slug missing', function () {",
              "  pm.expect(pm.response.code).to.eql(400);",
              "});",
              "pm.test('Response has error message', function () {",
              "  var jsonData = pm.response.json();",
              "  pm.expect(jsonData).to.have.property('error') || pm.expect(jsonData).to.have.property('message');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\"name\": \"\", \"slug\": \"\"}"
        },
        "url": {
          "raw": "{{base_url}}/brands",
          "host": [
            "{{base_url}}"
          ],
          "path": ["brands"]
        }
      }
    },
    {
      "name": "GET Brand by ID - Fail Case Not Found",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 404 when brand not found', function () {",
              "  pm.expect(pm.response.code).to.eql(404);",
              "});",
              "pm.test('Response has error message', function () {",
              "  var jsonData = pm.response.json();",
              "  pm.expect(jsonData).to.have.property('error') || pm.expect(jsonData).to.have.property('message');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/brands/999999",
          "host": [
            "{{base_url}}"
          ],
          "path": ["brands", "999999"]
        }
      }
    },
    {
      "name": "PUT Brand by ID - Fail Not Found",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 404 when updating non-existing brand', function () {",
              "  pm.expect(pm.response.code).to.eql(404);",
              "});",
              "pm.test('Response has error message', function () {",
              "  var jsonData = pm.response.json();",
              "  pm.expect(jsonData).to.have.property('error') || pm.expect(jsonData).to.have.property('message');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\"name\": \"Fail Updated\", \"slug\": \"fail-updated\"}"
        },
        "url": {
          "raw": "{{base_url}}/brands/999999",
          "host": [
            "{{base_url}}"
          ],
          "path": ["brands", "999999"]
        }
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8091"
    }
  ]
}
